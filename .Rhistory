cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# read in attributes and edgelist
nodes = read.csv("./data/nodes.csv", header = TRUE, stringsAsFactors = FALSE)
edges = read.csv("./data/edges.csv", header = TRUE, stringsAsFactors = FALSE)
# make a network
## sort your attributes frame alphabetically. Super important!
nodes = nodes[order(nodes$id), ]
## make network!
rgraph = network(edges, directed = FALSE, matrix.type = "edgelist")
# largest component
## find what nodes are part of the largest component
rgraph%v%"lc" = component.largest(rgraph)
## delete those nodes that are not
### in the network
rgraph = delete.vertices(rgraph, which(rgraph%v%"lc" == FALSE))
### in our dataframes
nodes = nodes[nodes$id %in% as.character(rgraph%v%"vertex.names"),]
edges = edges[which(edges$to %in% nodes$id | edges$from %in% nodes$id),]
# generate measures
## degree
rgraph%v%"degree" = degree(rgraph)
## mean geodesic
rgraph%v%"mean_distance" = (colSums(geodist(rgraph)$gdist)) / (nrow(as.sociomatrix(rgraph)) - 1)
## normalized betweenness
rgraph%v%"norm_betweenness" = betweenness(dat = rgraph, gmode = "graph", rescale = TRUE, cmode = "undirected")
## eigenvector
rgraph%v%"evc" = evcent(rgraph, gmode = "graph", rescale = TRUE)
# add back to attributes dataframe
## degree
nodes$degree = rgraph%v%"degree"
## mean geodesic
nodes$mean_distance = rgraph%v%"mean_distance"
## normalized betweenness
nodes$norm_betweenness = rgraph%v%"norm_betweenness"
## eigenvector
nodes$evc = rgraph%v%"evc"
# emojis
net_url1 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-teacher_emoji.png"
net_url2 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-student_emoji.png"
net_url3 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-health-worker_emoji.png"
net_url4 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-scientist_emoji.png"
# examples
net_url5 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/who_shall_survive.png"
net_url6 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/neuronet.jpg"
net_url7 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/chem_graph.jpg"
net_url8 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/page_rank.jpg"
net_url9 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/infrastructure_net.jpg"
net_url10 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/terror_net.png"
# others
net_url11 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/2mode.png"
net_url12 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/2_step.png"
nodes = data.frame(id = 1:4,
shape = "image",
title = c("<p style='color: black;'>Name: J<br>Age: 30<br>Widgets: 1</p>", "<p style='color: black;'>Name: Y<br>Age: 21<br>Widgets: 3</p>", "<p style='color: black;'>Name: G<br>Age: 32<br>Widgets: 4</p>", "<p style='color: black;'>Name: Z<br>Age: 48<br>Widgets: 8</p>"),
image = c(net_url1, net_url2, net_url3, net_url4))
edges = data.frame(from = c(2,4,3,3), to = c(1,2,4,2), label = c("Siblings", "Student", "Friends", "Parent"))
toy_net = visNetwork(nodes, edges, width = "100%") %>%
visNodes(shapeProperties = list(useBorderWithImage = FALSE), size = 50) %>%
visEdges(length = 200, scaling = list(min = 400)) %>%
visInteraction(zoomView = FALSE) %>%
visLayout(randomSeed = 2)
toy_net$sizingPolicy$browser$fill = TRUE
toy_net
degree_df = nodes
degree_df$value = degree(rgraph)^2
library(flexdashboard)
library(knitr)
library(rmdformats)
library(statnet)
library(visNetwork)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# read in attributes and edgelist
nodes = read.csv("./data/nodes.csv", header = TRUE, stringsAsFactors = FALSE)
edges = read.csv("./data/edges.csv", header = TRUE, stringsAsFactors = FALSE)
# make a network
## sort your attributes frame alphabetically. Super important!
nodes = nodes[order(nodes$id), ]
## make network!
rgraph = network(edges, directed = FALSE, matrix.type = "edgelist")
# largest component
## find what nodes are part of the largest component
rgraph%v%"lc" = component.largest(rgraph)
## delete those nodes that are not
### in the network
rgraph = delete.vertices(rgraph, which(rgraph%v%"lc" == FALSE))
### in our dataframes
nodes = nodes[nodes$id %in% as.character(rgraph%v%"vertex.names"),]
edges = edges[which(edges$to %in% nodes$id | edges$from %in% nodes$id),]
# generate measures
## degree
rgraph%v%"degree" = degree(rgraph)
## mean geodesic
rgraph%v%"mean_distance" = (colSums(geodist(rgraph)$gdist)) / (nrow(as.sociomatrix(rgraph)) - 1)
## normalized betweenness
rgraph%v%"norm_betweenness" = betweenness(dat = rgraph, gmode = "graph", rescale = TRUE, cmode = "undirected")
## eigenvector
rgraph%v%"evc" = evcent(rgraph, gmode = "graph", rescale = TRUE)
# add back to attributes dataframe
## degree
nodes$degree = rgraph%v%"degree"
## mean geodesic
nodes$mean_distance = rgraph%v%"mean_distance"
## normalized betweenness
nodes$norm_betweenness = rgraph%v%"norm_betweenness"
## eigenvector
nodes$evc = rgraph%v%"evc"
# emojis
net_url1 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-teacher_emoji.png"
net_url2 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-student_emoji.png"
net_url3 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-health-worker_emoji.png"
net_url4 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-scientist_emoji.png"
# examples
net_url5 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/who_shall_survive.png"
net_url6 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/neuronet.jpg"
net_url7 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/chem_graph.jpg"
net_url8 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/page_rank.jpg"
net_url9 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/infrastructure_net.jpg"
net_url10 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/terror_net.png"
# others
net_url11 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/2mode.png"
net_url12 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/2_step.png"
toy_nodes = data.frame(id = 1:4,
shape = "image",
title = c("<p style='color: black;'>Name: J<br>Age: 30<br>Widgets: 1</p>", "<p style='color: black;'>Name: Y<br>Age: 21<br>Widgets: 3</p>", "<p style='color: black;'>Name: G<br>Age: 32<br>Widgets: 4</p>", "<p style='color: black;'>Name: Z<br>Age: 48<br>Widgets: 8</p>"),
image = c(net_url1, net_url2, net_url3, net_url4))
toy_edges = data.frame(from = c(2,4,3,3), to = c(1,2,4,2), label = c("Siblings", "Student", "Friends", "Parent"))
toy_net = visNetwork(toy_nodes, toy_edges, width = "100%") %>%
visNodes(shapeProperties = list(useBorderWithImage = FALSE), size = 50) %>%
visEdges(length = 200, scaling = list(min = 400)) %>%
visInteraction(zoomView = FALSE) %>%
visLayout(randomSeed = 2)
toy_net$sizingPolicy$browser$fill = TRUE
toy_net
degree_df = nodes
degree_df$value = degree(rgraph)^2
visNetwork(degree_df, edges, main = "Degree Example") %>% visInteraction(zoomView = FALSE)
?visInteraction
library(flexdashboard)
library(knitr)
library(rmdformats)
library(statnet)
library(visNetwork)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# read in attributes and edgelist
nodes = read.csv("./data/nodes.csv", header = TRUE, stringsAsFactors = FALSE)
edges = read.csv("./data/edges.csv", header = TRUE, stringsAsFactors = FALSE)
# make a network
## sort your attributes frame alphabetically. Super important!
nodes = nodes[order(nodes$id), ]
## make network!
rgraph = network(edges, directed = FALSE, matrix.type = "edgelist")
# largest component
## find what nodes are part of the largest component
rgraph%v%"lc" = component.largest(rgraph)
## delete those nodes that are not
### in the network
rgraph = delete.vertices(rgraph, which(rgraph%v%"lc" == FALSE))
### in our dataframes
nodes = nodes[nodes$id %in% as.character(rgraph%v%"vertex.names"),]
edges = edges[which(edges$to %in% nodes$id | edges$from %in% nodes$id),]
# generate measures
## degree
rgraph%v%"degree" = degree(rgraph)
## mean geodesic
rgraph%v%"mean_distance" = (colSums(geodist(rgraph)$gdist)) / (nrow(as.sociomatrix(rgraph)) - 1)
## normalized betweenness
rgraph%v%"norm_betweenness" = betweenness(dat = rgraph, gmode = "graph", rescale = TRUE, cmode = "undirected")
## eigenvector
rgraph%v%"evc" = evcent(rgraph, gmode = "graph", rescale = TRUE)
# add back to attributes dataframe
## degree
nodes$degree = rgraph%v%"degree"
## mean geodesic
nodes$mean_distance = rgraph%v%"mean_distance"
## normalized betweenness
nodes$norm_betweenness = rgraph%v%"norm_betweenness"
## eigenvector
nodes$evc = rgraph%v%"evc"
# emojis
.net_url1 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-teacher_emoji.png"
.net_url2 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-student_emoji.png"
.net_url3 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-health-worker_emoji.png"
.net_url4 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-scientist_emoji.png"
.toy_nodes = data.frame(id = 1:4,
shape = "image",
title = c("<p style='color: black;'>Name: J<br>Age: 30<br>Widgets: 1</p>", "<p style='color: black;'>Name: Y<br>Age: 21<br>Widgets: 3</p>", "<p style='color: black;'>Name: G<br>Age: 32<br>Widgets: 4</p>", "<p style='color: black;'>Name: Z<br>Age: 48<br>Widgets: 8</p>"),
image = c(.net_url1, .net_url2, .net_url3, .net_url4))
.toy_edges = data.frame(from = c(2,4,3,3), to = c(1,2,4,2), label = c("Siblings", "Student", "Friends", "Parent"))
.toy_net = visNetwork(.toy_nodes, .toy_edges, width = "100%") %>%
visNodes(shapeProperties = list(useBorderWithImage = FALSE), size = 50) %>%
visEdges(length = 200, scaling = list(min = 400)) %>%
visInteraction(zoomView = FALSE) %>%
visLayout(randomSeed = 2)
.toy_net$sizingPolicy$browser$fill = TRUE
.toy_net
rgraph
rgraph%e%"id"
nrow(edges)
degree_df$color = "#022851"
# make dataframe for vis of degree
degree_df = nodes
degree_df$value = degree(rgraph)^2
degree_df$color = "#022851"
degree_df$degree
degree_df[which(max(degree_df$degree)),]
degree_df[which(max(degree_df$degree) == degree_df$degree),]
# add color for largest node
degree_df[which(max(degree_df$degree) == degree_df$degree), "color"] = "#FFBF00"
View(degree_df)
.seed
.seed = 1337
max(degree_df$degree)
log10(degree(rgraph)+1)
(degree(rgraph)-mean(degree(rgraph)))/sd(degree(rgraph))
(degree(rgraph)-mean(degree(rgraph)))/sd(degree(rgraph))^2
(degree(rgraph)-mean(degree(rgraph)))/sd(degree(rgraph))^3
192/32
32/192
(32/192)*100
summary(nodes$degree)
knitr::kable(summary(nodes$degree))
skimr::skim(summary(nodes$degree))
skimr::skim(nodes$degree)
?skimr
skimr::skim_tee(nodes$degree)
knitr::kable(skimr::skim_tee(nodes$degree))
knitr::kable(skimr::skim_tee(nodes$degree), format = "simple")
knitr::kable(skimr::skim_tee(nodes$degree), format = "html")
plot(nodes$degree)
hist(nodes$degree)
hist(nodes$degree, main = "Degree")
hist(nodes$degree, main = "Degree", xlab = "Total Degree")
?hist
(max(nodes$degree)/nrow(edges))*100
library(flexdashboard)
library(knitr)
library(rmdformats)
library(statnet)
library(visNetwork)
# options
.seed = 1337
# knitr options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# read in attributes and edgelist
nodes = read.csv("./data/nodes.csv", header = TRUE, stringsAsFactors = FALSE)
edges = read.csv("./data/edges.csv", header = TRUE, stringsAsFactors = FALSE)
# make a network
## sort your attributes frame alphabetically. Super important!
nodes = nodes[order(nodes$id), ]
## make network!
rgraph = network(edges, directed = FALSE, matrix.type = "edgelist")
# largest component
## find what nodes are part of the largest component
rgraph%v%"lc" = component.largest(rgraph)
## delete those nodes that are not
### in the network
rgraph = delete.vertices(rgraph, which(rgraph%v%"lc" == FALSE))
### in our dataframes
nodes = nodes[nodes$id %in% as.character(rgraph%v%"vertex.names"),]
edges = edges[which(edges$to %in% nodes$id | edges$from %in% nodes$id),]
# generate measures
## degree
rgraph%v%"degree" = degree(rgraph)
## mean geodesic
rgraph%v%"mean_distance" = (colSums(geodist(rgraph)$gdist)) / (nrow(as.sociomatrix(rgraph)) - 1)
## normalized betweenness
rgraph%v%"norm_betweenness" = betweenness(dat = rgraph, gmode = "graph", rescale = TRUE, cmode = "undirected")
## eigenvector
rgraph%v%"evc" = evcent(rgraph, gmode = "graph", rescale = TRUE)
# add back to attributes dataframe
## degree
nodes$degree = rgraph%v%"degree"
## mean geodesic
nodes$mean_distance = rgraph%v%"mean_distance"
## normalized betweenness
nodes$norm_betweenness = rgraph%v%"norm_betweenness"
## eigenvector
nodes$evc = rgraph%v%"evc"
# emojis
.net_url1 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-teacher_emoji.png"
.net_url2 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-student_emoji.png"
.net_url3 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-health-worker_emoji.png"
.net_url4 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-scientist_emoji.png"
.toy_nodes = data.frame(id = 1:4,
shape = "image",
title = c("<p style='color: black;'>Name: J<br>Age: 30<br>Widgets: 1</p>", "<p style='color: black;'>Name: Y<br>Age: 21<br>Widgets: 3</p>", "<p style='color: black;'>Name: G<br>Age: 32<br>Widgets: 4</p>", "<p style='color: black;'>Name: Z<br>Age: 48<br>Widgets: 8</p>"),
image = c(.net_url1, .net_url2, .net_url3, .net_url4))
.toy_edges = data.frame(from = c(2,4,3,3), to = c(1,2,4,2), label = c("Siblings", "Student", "Friends", "Parent"))
.toy_net = visNetwork(.toy_nodes, .toy_edges, width = "100%") %>%
visNodes(shapeProperties = list(useBorderWithImage = FALSE), size = 50) %>%
visEdges(length = 200, scaling = list(min = 400)) %>%
visInteraction(zoomView = FALSE) %>%
visLayout(randomSeed = 2)
.toy_net$sizingPolicy$browser$fill = TRUE
.toy_net
(max(nodes$degree)/nrow(edges))*100
round((max(nodes$degree)/nrow(edges))*100, digits = 2)
?skim
test = skimr::skim(nodes$degree)
library(flexdashboard)
library(knitr)
library(rmdformats)
library(statnet)
library(visNetwork)
library(skimr)
# options
.seed = 1337
# knitr options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# read in attributes and edgelist
nodes = read.csv("./data/nodes.csv", header = TRUE, stringsAsFactors = FALSE)
edges = read.csv("./data/edges.csv", header = TRUE, stringsAsFactors = FALSE)
# make a network
## sort your attributes frame alphabetically. Super important!
nodes = nodes[order(nodes$id), ]
## make network!
rgraph = network(edges, directed = FALSE, matrix.type = "edgelist")
# largest component
## find what nodes are part of the largest component
rgraph%v%"lc" = component.largest(rgraph)
## delete those nodes that are not
### in the network
rgraph = delete.vertices(rgraph, which(rgraph%v%"lc" == FALSE))
### in our dataframes
nodes = nodes[nodes$id %in% as.character(rgraph%v%"vertex.names"),]
edges = edges[which(edges$to %in% nodes$id | edges$from %in% nodes$id),]
# generate measures
## degree
rgraph%v%"degree" = degree(rgraph)
## mean geodesic
rgraph%v%"mean_distance" = (colSums(geodist(rgraph)$gdist)) / (nrow(as.sociomatrix(rgraph)) - 1)
## normalized betweenness
rgraph%v%"norm_betweenness" = betweenness(dat = rgraph, gmode = "graph", rescale = TRUE, cmode = "undirected")
## eigenvector
rgraph%v%"evc" = evcent(rgraph, gmode = "graph", rescale = TRUE)
# add back to attributes dataframe
## degree
nodes$degree = rgraph%v%"degree"
## mean geodesic
nodes$mean_distance = rgraph%v%"mean_distance"
## normalized betweenness
nodes$norm_betweenness = rgraph%v%"norm_betweenness"
## eigenvector
nodes$evc = rgraph%v%"evc"
# emojis
.net_url1 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-teacher_emoji.png"
.net_url2 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-student_emoji.png"
.net_url3 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-health-worker_emoji.png"
.net_url4 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-scientist_emoji.png"
.toy_nodes = data.frame(id = 1:4,
shape = "image",
title = c("<p style='color: black;'>Name: J<br>Age: 30<br>Widgets: 1</p>", "<p style='color: black;'>Name: Y<br>Age: 21<br>Widgets: 3</p>", "<p style='color: black;'>Name: G<br>Age: 32<br>Widgets: 4</p>", "<p style='color: black;'>Name: Z<br>Age: 48<br>Widgets: 8</p>"),
image = c(.net_url1, .net_url2, .net_url3, .net_url4))
.toy_edges = data.frame(from = c(2,4,3,3), to = c(1,2,4,2), label = c("Siblings", "Student", "Friends", "Parent"))
.toy_net = visNetwork(.toy_nodes, .toy_edges, width = "100%") %>%
visNodes(shapeProperties = list(useBorderWithImage = FALSE), size = 50) %>%
visEdges(length = 200, scaling = list(min = 400)) %>%
visInteraction(zoomView = FALSE) %>%
visLayout(randomSeed = 2)
.toy_net$sizingPolicy$browser$fill = TRUE
.toy_net
skim_without_charts(nodes$degree) %>% yank("numeric")
centralization(rgraph, degree)
round(centralization(rgraph, degree), digits = 2)
View(nodes)
mean(nodes$mean_distance)
round(mean(nodes$mean_distance), digits = 2)
library(flexdashboard)
library(knitr)
library(rmdformats)
library(statnet)
library(visNetwork)
library(skimr)
# options
.seed = 1337
# knitr options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# read in attributes and edgelist
nodes = read.csv("./data/nodes.csv", header = TRUE, stringsAsFactors = FALSE)
edges = read.csv("./data/edges.csv", header = TRUE, stringsAsFactors = FALSE)
# make a network
## sort your attributes frame alphabetically. Super important!
nodes = nodes[order(nodes$id), ]
## make network!
rgraph = network(edges, directed = FALSE, matrix.type = "edgelist")
# largest component
## find what nodes are part of the largest component
rgraph%v%"lc" = component.largest(rgraph)
## delete those nodes that are not
### in the network
rgraph = delete.vertices(rgraph, which(rgraph%v%"lc" == FALSE))
### in our dataframes
nodes = nodes[nodes$id %in% as.character(rgraph%v%"vertex.names"),]
edges = edges[which(edges$to %in% nodes$id | edges$from %in% nodes$id),]
# generate measures
## degree
rgraph%v%"degree" = degree(rgraph)
## mean geodesic
rgraph%v%"mean_distance" = (colSums(geodist(rgraph)$gdist)) / (nrow(as.sociomatrix(rgraph)) - 1)
## normalized betweenness
rgraph%v%"norm_betweenness" = betweenness(dat = rgraph, gmode = "graph", rescale = TRUE, cmode = "undirected")
## eigenvector
rgraph%v%"evc" = evcent(rgraph, gmode = "graph", rescale = TRUE)
# add back to attributes dataframe
## degree
nodes$degree = rgraph%v%"degree"
## mean geodesic
nodes$mean_distance = rgraph%v%"mean_distance"
## normalized betweenness
nodes$norm_betweenness = rgraph%v%"norm_betweenness"
## eigenvector
nodes$evc = rgraph%v%"evc"
# emojis
.net_url1 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-teacher_emoji.png"
.net_url2 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-student_emoji.png"
.net_url3 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/female-health-worker_emoji.png"
.net_url4 = "https://raw.githubusercontent.com/Epsian/sna_lecture/main/resources/male-scientist_emoji.png"
.toy_nodes = data.frame(id = 1:4,
shape = "image",
title = c("<p style='color: black;'>Name: J<br>Age: 30<br>Widgets: 1</p>", "<p style='color: black;'>Name: Y<br>Age: 21<br>Widgets: 3</p>", "<p style='color: black;'>Name: G<br>Age: 32<br>Widgets: 4</p>", "<p style='color: black;'>Name: Z<br>Age: 48<br>Widgets: 8</p>"),
image = c(.net_url1, .net_url2, .net_url3, .net_url4))
.toy_edges = data.frame(from = c(2,4,3,3), to = c(1,2,4,2), label = c("Siblings", "Student", "Friends", "Parent"))
.toy_net = visNetwork(.toy_nodes, .toy_edges, width = "100%") %>%
visNodes(shapeProperties = list(useBorderWithImage = FALSE), size = 50) %>%
visEdges(length = 200, scaling = list(min = 400)) %>%
visInteraction(zoomView = FALSE) %>%
visLayout(randomSeed = 2)
.toy_net$sizingPolicy$browser$fill = TRUE
.toy_net
skim_without_charts(nodes$degree) %>% yank("numeric")
# make dataframe for vis of degree
degree_df = nodes
degree_df$value = degree(rgraph)^2
degree_df$color = "#022851"
# add color for largest node
degree_df[which(max(degree_df$degree) == degree_df$degree), "color"] = "#FFBF00"
visNetwork(degree_df, edges) %>%
visInteraction(zoomView = FALSE, dragView = FALSE) %>%
visOptions(highlightNearest = TRUE) %>%
visLayout(randomSeed = .seed)
hist(nodes$degree, main = "Degree Frequency", xlab = "Total Degree")
skim_without_charts(nodes$mean_distance) %>% yank("numeric")
# make df to vis geodesic distances
gdist_df = nodes
gdist_df$value = rgraph%v%"mean_distance"
gdist_df$color = "#022851"
# replace min average geodesic with blue, max with red
gdist_df$color[which(rgraph%v%"mean_distance" == max(rgraph%v%"mean_distance"))] = "#022851"
gdist_df$color[which(rgraph%v%"mean_distance" == min(rgraph%v%"mean_distance"))] = "#CDD6E0"
# add label as geodesic distance, rounding to 3 digits
rgraph$label = round(rgraph%v%"mean_distance", 2)
# plot
visNetwork(gdist_df, edges) %>%
visInteraction(zoomView = FALSE, dragView = FALSE) %>%
visOptions(highlightNearest = TRUE) %>%
visLayout(randomSeed = .seed)
View(gdist_df)
gdist_df$color[which(rgraph%v%"mean_distance" == max(rgraph%v%"mean_distance"))]
(1 - rgraph%v%"mean_distance")
(1 - rgraph%v%"mean_distance")^2
(rgraph%v%"mean_distance" * -1)
(rgraph%v%"mean_distance")
(rgraph%v%"mean_distance" * -1)
(rgraph%v%"mean_distance" * -10)
